# Generated by Django 4.2.4 on 2023-09-04 12:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('magazon_app', '0004_remove_category_subcategory_subcategory_category_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BodyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Тип кузова')),
            ],
            options={
                'verbose_name': 'Тип кузова',
                'verbose_name_plural': 'Типы кузова легковых авто',
            },
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Марка')),
            ],
            options={
                'verbose_name': 'Марку',
                'verbose_name_plural': 'Марки легковых авто',
            },
        ),
        migrations.CreateModel(
            name='CarColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Цвет',
                'verbose_name_plural': 'Цвета легковых авто',
            },
        ),
        migrations.CreateModel(
            name='CareState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Состояние')),
            ],
            options={
                'verbose_name': 'Состояние',
                'verbose_name_plural': 'Состояния легковых авто',
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Модель')),
            ],
            options={
                'verbose_name': 'Модель',
                'verbose_name_plural': 'Модели легковых авто',
            },
        ),
        migrations.CreateModel(
            name='DriveUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Тип двигателя')),
            ],
            options={
                'verbose_name': 'Тип двигателя',
                'verbose_name_plural': 'Типы двигателей легковых авто',
            },
        ),
        migrations.CreateModel(
            name='EngineType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Тип двигателя')),
            ],
            options={
                'verbose_name': 'Тип двигателя',
                'verbose_name_plural': 'Типы двигателей авто',
            },
        ),
        migrations.CreateModel(
            name='EngineVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True, verbose_name='Объём двигателя')),
            ],
            options={
                'verbose_name': 'Объём двигателя',
                'verbose_name_plural': 'Объёмы двигателей легковых авто',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100, unique=True, verbose_name='Область')),
            ],
            options={
                'verbose_name': 'Область',
                'verbose_name_plural': 'Области',
            },
        ),
        migrations.CreateModel(
            name='Transmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Коробка передач')),
            ],
            options={
                'verbose_name': 'Тип коробки передач',
                'verbose_name_plural': 'Типы коробки передач легковых авто',
            },
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True, verbose_name='Год')),
            ],
            options={
                'verbose_name': 'Год',
                'verbose_name_plural': 'Годы выпуска легковых авто',
            },
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(max_length=255, unique=True, verbose_name='Категория'),
        ),
        migrations.AlterField(
            model_name='subcategory',
            name='name',
            field=models.CharField(max_length=255, unique=True, verbose_name='Подкатегория'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100, unique=True, verbose_name='Город')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='regions', to='magazon_app.region', verbose_name='Область')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'unique_together': {('city', 'region')},
            },
        ),
        migrations.CreateModel(
            name='Cars',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Название товара/услуги')),
                ('mileage', models.IntegerField(verbose_name='Пробег, км')),
                ('air_conditioner', models.BooleanField(verbose_name='Кондиционер / климат-контроль')),
                ('seat_heating', models.BooleanField(verbose_name='Обогрев сидений')),
                ('abs_esp_asr', models.BooleanField(verbose_name='ABS / ESP / ASR')),
                ('regular_navigation', models.BooleanField(verbose_name='Regular navigation')),
                ('alloy_wheels', models.BooleanField(verbose_name='Легкосплавные диски')),
                ('parctronic_camera', models.BooleanField(verbose_name='Парктроник / камера')),
                ('sunroof', models.BooleanField(verbose_name='Люк / панорамная крыша')),
                ('theft_protection', models.BooleanField(verbose_name='Защита от угона')),
                ('xenon', models.BooleanField(verbose_name='Ксенон / биксенон')),
                ('cruise_control', models.BooleanField(verbose_name='Круиз-контроль')),
                ('aux_usb_bluetooth', models.BooleanField(verbose_name='AUX / USB / Bluetooth')),
                ('vin', models.CharField(max_length=150, unique=True, verbose_name='Номер VIN')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.FloatField(verbose_name='Цена')),
                ('exchange', models.BooleanField(verbose_name='Возможен обмен')),
                ('leasing', models.BooleanField(verbose_name='Лизинг от продавца')),
                ('installment_plan', models.BooleanField(verbose_name='Готов(а) продать товар в рассрочку')),
                ('bodyType', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.bodytype', verbose_name='Тип кузова')),
                ('carBrand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.carbrand', verbose_name='Марка')),
                ('carColor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.carcolor', verbose_name='Цвет')),
                ('carModel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.carmodel', verbose_name='Модель')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.city', verbose_name='Город')),
                ('driveUnit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.driveunit', verbose_name='Привод')),
                ('engineType', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.enginetype', verbose_name='Тип двигателя')),
                ('engineVolume', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.enginevolume', verbose_name='Объём двигателя')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.region', verbose_name='Область')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.carestate', verbose_name='Состояние')),
                ('transmission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.transmission', verbose_name='Коробка передач')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='magazon_app.year', verbose_name='Год')),
            ],
        ),
    ]
